29.08.16:
	Dev-Tools auf movii installiert ( git, tortoisegit, notepad++, cmake )
	Installation naoqi-sdk ( inklusive python27, cmake )
	-> Einrichtung IDE Visual Studio 2015 gescheitert (naoqi SDK ist ausgelegt für VS 2010)
	Mögliche Alternative: Libqi selbst kompilieren (mit VS 2015)
	
30.08.16 - 01.09.16:
	Kompilieren von libqi:
	- vorkompiliertes boost (32bit, vs14) runtergeladen, BOOST_ROOT angegeben, symlink im boost root lib -> lib32-msvc-14.0
	- openssl latest runtergeladen, OPENSSL_ROOT_DIR angegeben 
	- PTHREAD build runtergeladen und FindThreads.cmake editiert ( Zeile 198++):
	  gibt nun hardcoded zurück: 
			set(PTHREAD_LIBRARIES "D:/NAO2016/pthread/lib/pthreadVCE2.lib")
			set(PTHREAD_INCLUDE_DIRS "D:/NAO2016/pthread/include")
	- OPTIONAL, je nachdem ob QI_WITH_TESTS definiert wird:
		- C:\Program Files\CMake\share\cmake-3.6\Modules\FindGtest.cmake kopiert nach FindGtest_MAIN.cmake
		-  googletest runtergeladen und mit vs14 compiliert (googletest/googletest/mscv/gtest-md.sln), -DGTEST_ROOT=D:\NAO2016\googletest\googletest
	- Fertige Cmdline:
		cmake -G"Visual Studio 14 2015 Win64" -DQI_WITH_TESTS=OFF -DBOOST_ROOT=E:\catfinder\qideps\boost_1_61_0_x64 -DOPENSSL_ROOT_DIR=E:\catfinder\qideps\openssl-1.0.1t-vs2015 -DBUILD_EXAMPLES=OFF -DCMAKE_INSTALL_PREFIX=E:\catfinder\libqi\build\sdk\ ..
	- Compilerfehler:
		- Bei der solution in den defines _ENABLE_ATOMIC_ALIGNMENT_FIX hinzugefügt. Alternativ per add_definitions("_ENAB... in die cmakelists einfügen
		- Module Properties -> c++ -> general -> multiprozessor compilation aktiviert
	- Source Changes:	
		- Copy-Constructor bei ScopedLockRead{Write,Only} hinzugefügt ?????
		- trackable.hxx "using BindTransform..." funktioniert nicht, von hand alle drei Vorkommen durch die lange Version ersetzt.
	NOTIZEN: shared standardlibrary und SEH exceptions aktivieren? Scheint in der release version gut zu funktionieren, in der debug nicht...
		
	qitest visual studio projekt angelegt:
		- qi.lib manuell hinzugefügt
		- include dirs: libqi folder, libqi sdk folder, boost include dirs
		- lib dirs: boost lib dir, openssl lib dir
		
	libqicore compilieren
		cmake -G"Visual Studio 14 2015 Win64" -DQI_WITH_TESTS=OFF -DQI_DIR=E:\catfinder\qideps\libqi-sdk\share\cmake\qi -DOPENSSL_ROOT_DIR=E:\catfinder\qideps\openssl-1.0.1t-vs2015 -DBOOST_ROOT=E:\catfinder\qideps\boost_1_61_0_x64 -Dqimodule_DIR=E:\catfinder\qideps\libqi-sdk\share\cmake\qimodule -DCMAKE_INSTALL_PREFIX=E:\catfinder\libqicore\build\sdk\ ..
	libqi/bin compilieren:
		cmake -DQI_DIR=E:\catfinder\libqi-sdk\share\cmake\qi -DQICORE_DIR=E:\catfinder\libqicore-sdk\share\cmake\qicore\ -DOPENSSL_ROOT_DIR=E:\catfinder\openssl-1.0.1t-vs2015 -DBOOST_ROOT=E:\catfinder\boost_1_61_0 ..
		
1.9.2016 16:00, Aldebaran Robotics stellt fest, dass sie seit zwei Jahren vergessen haben ihre libqicore commits auf github zu pushen...
5.9.2016 
		NAO Befehl um Kamera zu streamen:
		gst-launch-0.10 -v v4l2src device=/dev/video1 ! video/x-raw-yuv,width=640,height=480,framerate=30/1 ! ffmpegcolorspace ! jpegenc ! multipartmux! tcpserversink port=3000
		- /dev/video0 ist die obere Kamera, die ist gerade nach vorne ausgerichtet
		- /dev/video1 ist die untere Kamera, die ist mehr Richtung Boden ausgerichtet.